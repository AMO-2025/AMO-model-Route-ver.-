# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C5Hf0F206mynXrRN1ua-SaZ2Y9talW_U
"""

from torchvision import datasets, transforms
from torchvision.models import efficientnet_b0
import torch.nn as nn
from torch.utils.data import DataLoader
import torch

test_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

test_dataset = datasets.ImageFolder('/content/drive/MyDrive/data/fer2013/test', transform=test_transforms)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

model = efficientnet_b0(pretrained=False)
model.classifier = nn.Sequential(
    nn.Dropout(0.5),
    nn.Linear(model.classifier[1].in_features, 7)  # 클래스수
)

state_dict = torch.load('/content/drive/MyDrive/weight/efficient_yfacedb_final.pth', map_location='cpu')  # GPU 안 쓴다면 map_location 추가
model.load_state_dict(state_dict)

model.eval() #evaluation mode
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)

correct = 0
total = 0

with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

accuracy = 100 * correct / total
print(f'Test Accuracy: {accuracy:.2f}%')